generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model album {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(100)
  portada_url  String?   @db.VarChar(255)
  release_date DateTime? @db.Date
  artist_id    Int?
  usuario      usuario?  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cancion      cancion[]
}

model anuncio {
  id           Int         @id @default(autoincrement())
  descripcion  String?
  monto_ganado Decimal?    @default(0.0) @db.Decimal(10, 2)
  activo       Boolean?    @default(true)
  usuario_id   Int?
  usuario      usuario?    @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ganancias    ganancias[]

  @@index([usuario_id], map: "idx_anuncio_usuario")
}

model cancion {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(100)
  genre_id        Int?
  album_id        Int?
  artist_id       Int?
  file_url        String            @db.VarChar(255)
  portada_url     String?           @db.VarChar(255)
  release_date    DateTime?         @db.Date
  reproducciones  Int?              @default(0)
  album           album?            @relation(fields: [album_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario         usuario?          @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genero          genero?           @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ganancias       ganancias[]
  historia        historia[]
  megusta         megusta[]
  playlistcancion playlistcancion[]

  @@index([album_id], map: "idx_cancion_album")
  @@index([artist_id], map: "idx_cancion_artist")
  @@index([genre_id], map: "idx_cancion_genero")
}

model comentario {
  id             Int          @id @default(autoincrement())
  texto          String
  usuario_id     Int?
  publicacion_id Int?
  publicacion    publicacion? @relation(fields: [publicacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario        usuario?     @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ganancias {
  id                     Int       @id @default(autoincrement())
  usuario_id             Int?
  total_ganancias        Decimal?  @default(0.0) @db.Decimal(10, 2)
  monto_por_reproduccion Decimal?  @default(0.0) @db.Decimal(5, 2)
  total_reproducciones   Int?      @default(0)
  ganancias_por_cancion  Decimal?  @default(0.0) @db.Decimal(10, 2)
  ganancias_por_anuncio  Decimal?  @default(0.0) @db.Decimal(10, 2)
  cancion_id             Int?
  anuncio_id             Int?
  fecha_actualizacion    DateTime? @default(now()) @db.Timestamp(6)
  anuncio                anuncio?  @relation(fields: [anuncio_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cancion                cancion?  @relation(fields: [cancion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario                usuario?  @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([usuario_id], map: "idx_ganancias_usuario")
}

model genero {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  portada_url String?   @db.VarChar(255)
  cancion     cancion[]
}

model historia {
  id          Int       @id @default(autoincrement())
  content_url String?   @db.VarChar(255)
  descripcion String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  user_id     Int?
  cancion_id  Int?
  cancion     cancion?  @relation(fields: [cancion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario     usuario?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model megusta {
  id             Int          @id @default(autoincrement())
  user_id        Int?
  cancion_id     Int?
  publicacion_id Int?
  cancion        cancion?     @relation(fields: [cancion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  publicacion    publicacion? @relation(fields: [publicacion_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario        usuario?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model perfil {
  id         Int       @id @default(autoincrement())
  bio        String?
  avatar_url String?   @db.VarChar(255)
  birth_date DateTime? @db.Date
  usuario    usuario[]
}

model playlist {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  portada_url     String?           @db.VarChar(255)
  user_id         Int?
  usuario         usuario?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  playlistcancion playlistcancion[]
}

model playlistcancion {
  playlist_id Int
  cancion_id  Int
  cancion     cancion  @relation(fields: [cancion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playlist    playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([playlist_id, cancion_id])
}

model publicacion {
  id          Int          @id @default(autoincrement())
  content_url String?      @db.VarChar(255)
  descripcion String?
  user_id     Int?
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  comentario  comentario[]
  megusta     megusta[]
  usuario     usuario?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model seguimiento {
  id                                       Int      @id @default(autoincrement())
  follower_id                              Int?
  followed_id                              Int?
  usuario_seguimiento_followed_idTousuario usuario? @relation("seguimiento_followed_idTousuario", fields: [followed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario_seguimiento_follower_idTousuario usuario? @relation("seguimiento_follower_idTousuario", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model usuario {
  id                                           Int           @id @default(autoincrement())
  username                                     String        @unique @db.VarChar(50)
  email                                        String        @unique @db.VarChar(100)
  password                                     String        @db.VarChar(100)
  role                                         String        @db.VarChar(20)
  nombre                                       String?       @db.VarChar(100)
  profile_id                                   Int?
  album                                        album[]
  anuncio                                      anuncio[]
  cancion                                      cancion[]
  comentario                                   comentario[]
  ganancias                                    ganancias[]
  historia                                     historia[]
  megusta                                      megusta[]
  playlist                                     playlist[]
  publicacion                                  publicacion[]
  seguimiento_seguimiento_followed_idTousuario seguimiento[] @relation("seguimiento_followed_idTousuario")
  seguimiento_seguimiento_follower_idTousuario seguimiento[] @relation("seguimiento_follower_idTousuario")
  perfil                                       perfil?       @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_profile")
}
